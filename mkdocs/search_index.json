{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n\n\nThis documentation is for MATRIX Creator and MATRIX OS.\n\n\n\n\n\n\nSetup\n\n\nInstalling Dependencies\n\n\n\n\nInstalling required device software\n\n\n\n\nInstalling MALOS\n\n\n\n\nHow to Implement the Everloop LED array\n -- Using HAL C++ hardware abstraction layer.\n\n\nInstalling MALOS Interface\n -- Using Node.js and MALOS (Matrix Abstraction Layer for OS).\n\n\n\n\nHardware\n\n\nFPGA and SAM3 MCU\n\n\nThese will be programmed for you at boot after you follow the \ngetting started\n session, but here is the documentation that you need in case you want to program them yourself.\n\n \nFPGA programming\n\n\n \nSAM3 flash\n\n* \nSAM3 MCU firmware programming\n\n\nReference\n\n\n\n\nOverview\n\n\nExpansion connector pinout\n\n\nFirmware for the SAM3S MCU\n\n\n\n\n\n\nInstalling MATRIX OS\n\n\nMATRIX OS\n\n\nMATRIX OS is a device and language agnostic approach towards building IoT applications which can utilize sensors, integrations, external API's and powerful computer vision, to drive real world behavior.\n\n\nAll the hardware is abstracted away, so you don't have to worry about reading voltages.\nAll the infrastructure is provided, so you can easily gather data from hundreds of devices in real time.\n\n\nOverview\n\n\n\n\nCLI\n - Manage your devices and apps through the CLI\n\n\nConfig\n - App configuration informs device permissions, dashboards, data storage, app meta information and service integrations\n\n\nAPI\n - MatrixOS syntax and examples\n\n\n\n\nLanguage Support\n\n\nMATRIX OS currently supports JavaScript. Next on the list is Python.\n\n\n\n\nSupport\n\n\n\n\nPost questions or comments on \ncommunity.matrix.one\n\n\nPost package issues on github under \nmatrix-io\n\n\n\n\nFeedback\n\n\nWe at AdMobilize have spent tens of thousands of hours making this for you. Please let us know your thoughts and feedback.", 
            "title": "Home"
        }, 
        {
            "location": "/#getting-started", 
            "text": "This documentation is for MATRIX Creator and MATRIX OS.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/#installing-dependencies", 
            "text": "Installing required device software", 
            "title": "Installing Dependencies"
        }, 
        {
            "location": "/#installing-malos", 
            "text": "How to Implement the Everloop LED array  -- Using HAL C++ hardware abstraction layer.  Installing MALOS Interface  -- Using Node.js and MALOS (Matrix Abstraction Layer for OS).", 
            "title": "Installing MALOS"
        }, 
        {
            "location": "/#hardware", 
            "text": "", 
            "title": "Hardware"
        }, 
        {
            "location": "/#fpga-and-sam3-mcu", 
            "text": "These will be programmed for you at boot after you follow the  getting started  session, but here is the documentation that you need in case you want to program them yourself.   FPGA programming    SAM3 flash \n*  SAM3 MCU firmware programming", 
            "title": "FPGA and SAM3 MCU"
        }, 
        {
            "location": "/#reference", 
            "text": "Overview  Expansion connector pinout  Firmware for the SAM3S MCU", 
            "title": "Reference"
        }, 
        {
            "location": "/#installing-matrix-os", 
            "text": "MATRIX OS  MATRIX OS is a device and language agnostic approach towards building IoT applications which can utilize sensors, integrations, external API's and powerful computer vision, to drive real world behavior.  All the hardware is abstracted away, so you don't have to worry about reading voltages.\nAll the infrastructure is provided, so you can easily gather data from hundreds of devices in real time.", 
            "title": "Installing MATRIX OS"
        }, 
        {
            "location": "/#overview", 
            "text": "CLI  - Manage your devices and apps through the CLI  Config  - App configuration informs device permissions, dashboards, data storage, app meta information and service integrations  API  - MatrixOS syntax and examples", 
            "title": "Overview"
        }, 
        {
            "location": "/#language-support", 
            "text": "MATRIX OS currently supports JavaScript. Next on the list is Python.", 
            "title": "Language Support"
        }, 
        {
            "location": "/#support", 
            "text": "Post questions or comments on  community.matrix.one  Post package issues on github under  matrix-io", 
            "title": "Support"
        }, 
        {
            "location": "/#feedback", 
            "text": "We at AdMobilize have spent tens of thousands of hours making this for you. Please let us know your thoughts and feedback.", 
            "title": "Feedback"
        }, 
        {
            "location": "/intro/install/", 
            "text": "From https://github.com/matrix-io/matrix-os#alpha-installation-instructions\n\n\nAlpha Installation Instructions\n\n\nNew parts of the MATRIX ecosystem are being developed and integrated every day. Here are a set of instructions which will get MATRIX OS running on your Creator. This will be streamlined in the future.\n\n\nLocal Computer\n\n\n\n\nInstall your Creator onto an rPi, connect to network cable which goes to local network, NOT to your computer, as it needs to be discoverable. Wifi support coming soon.\n\n\nDiscover your rPi address with \narp -na | grep -i b8:27:eb\n.\n\n\nSSH into your rPi. \nssh pi@192.168.0.15\n\n\n(Optional) Map ip to a host name in \n/etc/hosts\n.\n\n\n\n\necho '192.168.0.15 matrix' \n /etc/hosts\nssh pi@matrix\n\n\n\n\nRaspberry Pi\n\n\nSetup\n\n\n\n\nIn one SSH session on your Creator run the following:\n\n\n\n\n# setup \n installation\necho \ndeb http://packages.matrix.one/matrix-creator/ ./\n | sudo tee --append /etc/apt/sources.list;\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo apt-get install -y xc3sprog malos-eye matrix-creator-openocd wiringpi matrix-creator-init cmake g++ git --force-yes;\ngit clone https://github.com/matrix-io/matrix-os.git;\ncd matrix-os;\ngit submodule update --init;\nnpm install;\n\n# configure - NOTE: This is interactive. Enable your camera\nsudo raspi-config;\n\n\nsudo reboot;\n\n\n\n\n\n\nBe sure your camera was enabled in \nraspi-config\n\n\n\n\nRun Services\n\n\n\n\nIn one SSH session, run \nmalos\n - hardware interface\n\n\nIn another SSH session, run \nmalos_eye\n - computer vision provider\n\n\n\n\nRegister Device\n\n\n\n\nWith https://github.com/matrix-io/matrix-cli run \nmatrix register device\n\n\nEnter a name and (optional) description\n\n\nAfter a few moments you will be provided with a device ID and secret.\n\n\nAdd these as environment variables via a shell script or command line.\n\n\n(optional) We export envs via an \n.env\n file which can be processed using \nsource .env\n\n\nTo begin targeting this device with the CLI, enter the \nmatrix use\n command provided\n\n\n\n\nRun MATRIX OS\n\n\n\n\nEnsure environment variables are set from above step.\n\n\nFrom the \nmatrix-os\n folder. \nnode index.js\n\n\nIf you want to start a MATRIX app on launch, use the env \nSTART_APP\n. ex. \nSTART_APP=monitor node index.js\n\n\nRead environment notes below.\n\n\nNow you can issue commands and deploy apps to your MATRIX OS from the CLI. ( https://github.com/matrix-io/matrix-cli)\n\n\nHave fun!", 
            "title": "Getting Started"
        }, 
        {
            "location": "/intro/install/#alpha-installation-instructions", 
            "text": "New parts of the MATRIX ecosystem are being developed and integrated every day. Here are a set of instructions which will get MATRIX OS running on your Creator. This will be streamlined in the future.", 
            "title": "Alpha Installation Instructions"
        }, 
        {
            "location": "/intro/install/#local-computer", 
            "text": "Install your Creator onto an rPi, connect to network cable which goes to local network, NOT to your computer, as it needs to be discoverable. Wifi support coming soon.  Discover your rPi address with  arp -na | grep -i b8:27:eb .  SSH into your rPi.  ssh pi@192.168.0.15  (Optional) Map ip to a host name in  /etc/hosts .   echo '192.168.0.15 matrix'   /etc/hosts\nssh pi@matrix", 
            "title": "Local Computer"
        }, 
        {
            "location": "/intro/install/#raspberry-pi", 
            "text": "", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/intro/install/#setup", 
            "text": "In one SSH session on your Creator run the following:   # setup   installation\necho  deb http://packages.matrix.one/matrix-creator/ ./  | sudo tee --append /etc/apt/sources.list;\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo apt-get install -y xc3sprog malos-eye matrix-creator-openocd wiringpi matrix-creator-init cmake g++ git --force-yes;\ngit clone https://github.com/matrix-io/matrix-os.git;\ncd matrix-os;\ngit submodule update --init;\nnpm install;\n\n# configure - NOTE: This is interactive. Enable your camera\nsudo raspi-config;\n\n\nsudo reboot;   Be sure your camera was enabled in  raspi-config", 
            "title": "Setup"
        }, 
        {
            "location": "/intro/install/#run-services", 
            "text": "In one SSH session, run  malos  - hardware interface  In another SSH session, run  malos_eye  - computer vision provider", 
            "title": "Run Services"
        }, 
        {
            "location": "/intro/install/#register-device", 
            "text": "With https://github.com/matrix-io/matrix-cli run  matrix register device  Enter a name and (optional) description  After a few moments you will be provided with a device ID and secret.  Add these as environment variables via a shell script or command line.  (optional) We export envs via an  .env  file which can be processed using  source .env  To begin targeting this device with the CLI, enter the  matrix use  command provided", 
            "title": "Register Device"
        }, 
        {
            "location": "/intro/install/#run-matrix-os", 
            "text": "Ensure environment variables are set from above step.  From the  matrix-os  folder.  node index.js  If you want to start a MATRIX app on launch, use the env  START_APP . ex.  START_APP=monitor node index.js  Read environment notes below.  Now you can issue commands and deploy apps to your MATRIX OS from the CLI. ( https://github.com/matrix-io/matrix-cli)  Have fun!", 
            "title": "Run MATRIX OS"
        }, 
        {
            "location": "/API/overview/", 
            "text": "Installation\n\n\nMATRIX OS applications are an independent process running on a device. They communicate with the MatrixOS core via IPC which is largely event driven. This makes sense for sensors, because just like a REST call, we are waiting for a data point.\n\n\nThe approach we have chosen for this is to use JavaScript callbacks which look like this.\n\n\nsomeFunction(function callback(data){})\n\n\n\n\nWhat this means is that we execute \nfunction callback()\n at a determined time inside of \nsomeFunction()\n.\n\n\nThis permits MatrixOS applications to respond to events, such as sensor information, CV detection, or external events as they happen.\n\n\nThinking in Events\n\n\nWhile you can write a \nmain()\n and loop it's execution, most of the power in the MatrixOS is in listening for certain conditions to be met, and then performing an action.\n\n\nHeed Warning\n\n\nNot all of this API is built and functional yet. We have endeavored to supply warning messages where there are implementation gaps. Use \nmatrix log\n for more info about your running apps.", 
            "title": "Overview"
        }, 
        {
            "location": "/API/overview/#installation", 
            "text": "MATRIX OS applications are an independent process running on a device. They communicate with the MatrixOS core via IPC which is largely event driven. This makes sense for sensors, because just like a REST call, we are waiting for a data point.  The approach we have chosen for this is to use JavaScript callbacks which look like this.  someFunction(function callback(data){})  What this means is that we execute  function callback()  at a determined time inside of  someFunction() .  This permits MatrixOS applications to respond to events, such as sensor information, CV detection, or external events as they happen.", 
            "title": "Installation"
        }, 
        {
            "location": "/API/overview/#thinking-in-events", 
            "text": "While you can write a  main()  and loop it's execution, most of the power in the MatrixOS is in listening for certain conditions to be met, and then performing an action.", 
            "title": "Thinking in Events"
        }, 
        {
            "location": "/API/overview/#heed-warning", 
            "text": "Not all of this API is built and functional yet. We have endeavored to supply warning messages where there are implementation gaps. Use  matrix log  for more info about your running apps.", 
            "title": "Heed Warning"
        }, 
        {
            "location": "/API/gpio/", 
            "text": "[WIP] GPIO can be used to communicate or receive input from analog and digital components through the MATRIX Creator, or any other sensor leveraging Raspberry Pi's GPIOs.\n\n\n.open\n\n\nmatrix.gpio.open(16, \noutput\n, function(err){\n    // read or write\n});\n\n\n\n\n.read\n\n\n\n\npinNumber\n: The GPIO you are reading from.\n\n\ncallback\n: Returns \nerr\n, \nvalue\n.\n\n\n\n\nmatrix.gpio.read(16, function(err, value) {\n  if(err) throw err;\n  console.log(value);   // The current state of the pin \n});\n\n\n\n\n.write\n\n\n\n\npinNumber\n: The GPIO you are reading from.\n\n\nvalue\n: The value you would like to update the GPIO with.\n\n\ncallback\n: Returns \nerr\n, \nvalue\n.\n\n\n\n\nmatrix.gpio.write(16, 1, function(err) {\n    if(err) throw err;\n});\n\n\n\n\n.close\n\n\n\n\npinNumber\n: The GPIO you would like to close.\n\n\n\n\nmatrix.gpio.close(16);\n\n\n\n\nExample\n\n\nmatrix.gpio.open(16, \noutput\n, function(err) {\n    matrix.gpio.write(16, 1, function() {\n        matrix.gpio.close(16);\n    });\n});", 
            "title": "GPIO"
        }, 
        {
            "location": "/API/gpio/#open", 
            "text": "matrix.gpio.open(16,  output , function(err){\n    // read or write\n});", 
            "title": ".open"
        }, 
        {
            "location": "/API/gpio/#read", 
            "text": "pinNumber : The GPIO you are reading from.  callback : Returns  err ,  value .   matrix.gpio.read(16, function(err, value) {\n  if(err) throw err;\n  console.log(value);   // The current state of the pin \n});", 
            "title": ".read"
        }, 
        {
            "location": "/API/gpio/#write", 
            "text": "pinNumber : The GPIO you are reading from.  value : The value you would like to update the GPIO with.  callback : Returns  err ,  value .   matrix.gpio.write(16, 1, function(err) {\n    if(err) throw err;\n});", 
            "title": ".write"
        }, 
        {
            "location": "/API/gpio/#close", 
            "text": "pinNumber : The GPIO you would like to close.   matrix.gpio.close(16);", 
            "title": ".close"
        }, 
        {
            "location": "/API/gpio/#example", 
            "text": "matrix.gpio.open(16,  output , function(err) {\n    matrix.gpio.write(16, 1, function() {\n        matrix.gpio.close(16);\n    });\n});", 
            "title": "Example"
        }, 
        {
            "location": "/API/sensors/", 
            "text": ".init\n\n\nAll sensors are initialized using the \ninit\n method. \n\n\n\n\nsensorType\n: Type of sensor you are initializing \ntemperature\n, \nhumidity\n, \npressure\n, \nuv\n, \naltitude\n, \ngyro\n, \naccel\n.\n\n\noptions\n: The options for that sensor. By default, all sensors have a \nrefresh\n and \ntimeout\n property.\n\n\n\n\nvar options = { \n  refresh: 1000 //milliseconds\n  timeout: 1000 //milliseconds\n};\n\nmatrix.init('temperature', options).then(function(data){\n  //see below for data formats\n})it\n\n\n\n\nTemperature\n\n\nOutput for \ntemperature\n (in \n).\n\n\n{\n  value: 28.0\n}\n\n\n\n\nHumidity\n\n\nOutput for \nhumidity\n.\n\n\nPressure\n\n\nOutput for \npressure\n.\n\n\nAltitude\n\n\nOutput for \naltitude\n.\n\n\nUV\n\n\nOutput for \ntemperature\n.\n\n\nGyroscope\n\n\nOutput for \ngyro\n.\n\n\n{\n  yaw: 82.06211853027344,\n  pitch: -7.972985744476318,\n  roll: 1.0514432191848755\n}\n\n\n\n\nAccelerometer\n\n\n{\n  x: 0.1,\n  y: 0.23,\n  z: 0.224\n}\n\n\n\n\nFiltering Sensor Data\n\n\nSee \nAPI \n Filter", 
            "title": "Sensors"
        }, 
        {
            "location": "/API/sensors/#init", 
            "text": "All sensors are initialized using the  init  method.    sensorType : Type of sensor you are initializing  temperature ,  humidity ,  pressure ,  uv ,  altitude ,  gyro ,  accel .  options : The options for that sensor. By default, all sensors have a  refresh  and  timeout  property.   var options = { \n  refresh: 1000 //milliseconds\n  timeout: 1000 //milliseconds\n};\n\nmatrix.init('temperature', options).then(function(data){\n  //see below for data formats\n})it", 
            "title": ".init"
        }, 
        {
            "location": "/API/sensors/#temperature", 
            "text": "Output for  temperature  (in  ).  {\n  value: 28.0\n}", 
            "title": "Temperature"
        }, 
        {
            "location": "/API/sensors/#humidity", 
            "text": "Output for  humidity .", 
            "title": "Humidity"
        }, 
        {
            "location": "/API/sensors/#pressure", 
            "text": "Output for  pressure .", 
            "title": "Pressure"
        }, 
        {
            "location": "/API/sensors/#altitude", 
            "text": "Output for  altitude .", 
            "title": "Altitude"
        }, 
        {
            "location": "/API/sensors/#uv", 
            "text": "Output for  temperature .", 
            "title": "UV"
        }, 
        {
            "location": "/API/sensors/#gyroscope", 
            "text": "Output for  gyro .  {\n  yaw: 82.06211853027344,\n  pitch: -7.972985744476318,\n  roll: 1.0514432191848755\n}", 
            "title": "Gyroscope"
        }, 
        {
            "location": "/API/sensors/#accelerometer", 
            "text": "{\n  x: 0.1,\n  y: 0.23,\n  z: 0.224\n}", 
            "title": "Accelerometer"
        }, 
        {
            "location": "/API/sensors/#filtering-sensor-data", 
            "text": "See  API   Filter", 
            "title": "Filtering Sensor Data"
        }, 
        {
            "location": "/API/filter/", 
            "text": "MatrixOS sensors and computer vision algorithms provide data which can be filtered between the \ninit\n, which can be regarded as the data source, and the \nthen\n, which can be regarded as the data receiver. Between the two, we can use chaining methods to easily filter what data is received.\n\n\n// filtering in a simple application\nmatrix.init('temperature')\n.above(80)\n.then(function(data){\n  // see CrossTalk documentation for more information about matrix.emit\n  matrix.emit('ac-control', 'turnOn');\n})\n\n\n\n\nFiltering decides whether or not a data point is passed to the \nthen()\n, it does not change the data in any way.\n\n\nSimple Filtering methods\n\n\nequality\n\n\nNumeric\n\n\nis()\n \nlike()\n\n\nmatrix.init('temperature').is(72)\n\n\n\n\nString\n\n\nmatrix.init('microphone').contains('hello world')\n\n\n\n\nnegation\n\n\nnot()\n\n\nmatrix.init('temperature').not(72)\n\n\n\n\nproximity\n\n\nnear()\n\n\nmatrix.init('gps').near([39.0432661,117.7249414])\n\n\n\n\nComplex Filtering\n\n\nhas\n\n\nhas()\n is used to refine a data source by additional criteria and keys.\n\n\n// for simple sensors\nmatrix.init('temperature').has('value')\n// equivalent to\nmatrix.init('temperature').has()\n\n// for complex sensors\nmatrix.init('gyro').has('x')\n\n// for detections\nmatrix.init('face').has('age')\n\n\n\n\nbounds\n\n\n greater then\n\n\nabove\n, \nover\n, 'after'\n\n\nmatrix.init('temperature').has().above(72)\n\n\n\n\n less then\n\n\nbelow\n, \nunder\n, 'before'\n\n\nmatrix.init('temperature').has().below(32)\n\n\n\n\nbetween\n\n\nmatrix.init('face').has('happy').between(50,100)", 
            "title": "Filters"
        }, 
        {
            "location": "/API/filter/#simple-filtering-methods", 
            "text": "", 
            "title": "Simple Filtering methods"
        }, 
        {
            "location": "/API/filter/#equality", 
            "text": "", 
            "title": "equality"
        }, 
        {
            "location": "/API/filter/#numeric", 
            "text": "is()   like()  matrix.init('temperature').is(72)", 
            "title": "Numeric"
        }, 
        {
            "location": "/API/filter/#string", 
            "text": "matrix.init('microphone').contains('hello world')", 
            "title": "String"
        }, 
        {
            "location": "/API/filter/#negation", 
            "text": "not()  matrix.init('temperature').not(72)", 
            "title": "negation"
        }, 
        {
            "location": "/API/filter/#proximity", 
            "text": "near()  matrix.init('gps').near([39.0432661,117.7249414])", 
            "title": "proximity"
        }, 
        {
            "location": "/API/filter/#complex-filtering", 
            "text": "", 
            "title": "Complex Filtering"
        }, 
        {
            "location": "/API/filter/#has", 
            "text": "has()  is used to refine a data source by additional criteria and keys.  // for simple sensors\nmatrix.init('temperature').has('value')\n// equivalent to\nmatrix.init('temperature').has()\n\n// for complex sensors\nmatrix.init('gyro').has('x')\n\n// for detections\nmatrix.init('face').has('age')", 
            "title": "has"
        }, 
        {
            "location": "/API/filter/#bounds", 
            "text": "", 
            "title": "bounds"
        }, 
        {
            "location": "/API/filter/#greater-then", 
            "text": "above ,  over , 'after'  matrix.init('temperature').has().above(72)", 
            "title": "&gt; greater then"
        }, 
        {
            "location": "/API/filter/#less-then", 
            "text": "below ,  under , 'before'  matrix.init('temperature').has().below(32)", 
            "title": "&lt; less then"
        }, 
        {
            "location": "/API/filter/#between", 
            "text": "matrix.init('face').has('happy').between(50,100)", 
            "title": "between"
        }, 
        {
            "location": "/API/microphone/", 
            "text": "matrix.init('microphone').contains('hello world')\n\n\n\n\nDirectional array\n\n\nIndividual microphones can be toggled as follows.\n\n\nmatrix.init('microphone', {\n// degrees\n  source: 90,\n// or by index\n  sensor: 5\n});\n\n\n\n\nFiltering\n\n\nmatrix.init('microphone').has('db').above(155).then()\n\n\n\n\ndb\n, \nfft", 
            "title": "Microphone"
        }, 
        {
            "location": "/API/microphone/#directional-array", 
            "text": "Individual microphones can be toggled as follows.  matrix.init('microphone', {\n// degrees\n  source: 90,\n// or by index\n  sensor: 5\n});", 
            "title": "Directional array"
        }, 
        {
            "location": "/API/microphone/#filtering", 
            "text": "matrix.init('microphone').has('db').above(155).then()  db ,  fft", 
            "title": "Filtering"
        }, 
        {
            "location": "/API/ir/", 
            "text": "Still working out the precise API for this. Stay tuned.\n\n\nmatrix.init('ir')...", 
            "title": "IR TX/RX"
        }, 
        {
            "location": "/API/everloop/", 
            "text": "A powerful tool for communicating with end users is the EverLoop LED circle.\n\n\nRendering\n\n\nMatrixOS is an attempt at abstracting out the complexity of hardware to make it very accessible for end users. At the same time, one also wants to support those who might want to perform more complex operations. When designing a language, sometimes compromises between ease of use and features must be made. \n\n\nThe problem\n\n\nMany things might want to write to the LED. We can leave it up to chance as to which gets to write, or we can approach it intelligently to optimize the aesthetics and performance. This requires a more complex notation. \n\n\nThe Solution\n\n\nmatrix.led('blue')\n//does nothing\n\n\nmatrix.led('green').render()\n//lights change\n\n\n\n\nSet Colors\n\n\n// set an initial color\nmatrix.led('red')\n\n// interleave two colors\nmatrix.led([ '#bada55, '#e1337e'])\n\n// support opacity\nmatrix.led('rgba(255, 0, 100, 0.6)')\n\n\n\n\nGenerate Shapes\n\n\nmatrix.led({\n  // number of lights to use [ 90\u00b0 = 9 ]   \n  arc: 9,\n\n  color: 'green',\n\n  // index to start drawing arc\n  start: 12\n});\n\n//no color assumes off\nmatrix.led({\n  arc: 360\n})\n\n// draw a point\nmatrix.led({\n  angle: 245,\n  color: 'white',\n  // blends interlight space if true, solid lights if false, default false\n  blend: true\n})\n\n// support multiple shapes\n\n\n\n\nManipulate colors\n\n\n//retrieves the current color state of the LED\nmatrix.led()\n\n// lighten all colors 0 - 100\nmatrix.led().brighten(10)\n\n// darken all colors 0 - 100\nmatrix.led().darken(10)\n\n\n\n\nManipulate position\n\n\n// rotate the lights clockwise by a specified angle\nmatrix.led().rotate(90)\n\n\n\n\nComposition\n\n\nShape Objects\n\n\n// make a smiley face\nmatrix.led([\n  {\n    angle: 45,\n    color: 'yellow'\n  },\n  {\n    angle: 135,\n    color: 'yellow'\n  },\n  {\n    arc: 90,\n    color: 'yellow',\n    start: 225\n  }\n]).darken(90).render();\n\n\n\n\nDirect Pixel Manipulation\n\n\nArray index = led to change\n\n\nmatrix.led([0, 0, 0, 0, 'yellow', 0,\n0, 0, 0, 0, 0, 0, 0, 'yellow', 0, 0,\n0, 0, 0, 0, 0, 0, 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow' ]).render();\n\n\n\n\nExample clock\n\n\nsetInterval(function(){\n  var time = new Date();\n  var h = time.getHours();\n  var m = time.getMinutes();\n  var s = time.getSeconds();\n\n  var hourLED = {\n    // translate hours (12) to angle (360)\n    arc: h * 3,\n    color: 'blue',\n    darken: 50\n  };\n\n  var minuteLED = {\n    // translate minutes ( 60 ) to angle ( 360 )\n    angle: m * 6,\n    color: 'green'\n  };\n\n  var secondLED = {\n    // translate seconds (60) to angle (360)\n    angle: s * 6,\n    color: yellow,\n    blend: true\n  };\n\n  matrix.led([hourLED, minuteLED]).render();\n\n}, 1000)", 
            "title": "Everloop"
        }, 
        {
            "location": "/API/everloop/#rendering", 
            "text": "MatrixOS is an attempt at abstracting out the complexity of hardware to make it very accessible for end users. At the same time, one also wants to support those who might want to perform more complex operations. When designing a language, sometimes compromises between ease of use and features must be made.", 
            "title": "Rendering"
        }, 
        {
            "location": "/API/everloop/#the-problem", 
            "text": "Many things might want to write to the LED. We can leave it up to chance as to which gets to write, or we can approach it intelligently to optimize the aesthetics and performance. This requires a more complex notation.", 
            "title": "The problem"
        }, 
        {
            "location": "/API/everloop/#the-solution", 
            "text": "matrix.led('blue')\n//does nothing\n\n\nmatrix.led('green').render()\n//lights change", 
            "title": "The Solution"
        }, 
        {
            "location": "/API/everloop/#set-colors", 
            "text": "// set an initial color\nmatrix.led('red')\n\n// interleave two colors\nmatrix.led([ '#bada55, '#e1337e'])\n\n// support opacity\nmatrix.led('rgba(255, 0, 100, 0.6)')", 
            "title": "Set Colors"
        }, 
        {
            "location": "/API/everloop/#generate-shapes", 
            "text": "matrix.led({\n  // number of lights to use [ 90\u00b0 = 9 ]   \n  arc: 9,\n\n  color: 'green',\n\n  // index to start drawing arc\n  start: 12\n});\n\n//no color assumes off\nmatrix.led({\n  arc: 360\n})\n\n// draw a point\nmatrix.led({\n  angle: 245,\n  color: 'white',\n  // blends interlight space if true, solid lights if false, default false\n  blend: true\n})\n\n// support multiple shapes", 
            "title": "Generate Shapes"
        }, 
        {
            "location": "/API/everloop/#manipulate-colors", 
            "text": "//retrieves the current color state of the LED\nmatrix.led()\n\n// lighten all colors 0 - 100\nmatrix.led().brighten(10)\n\n// darken all colors 0 - 100\nmatrix.led().darken(10)", 
            "title": "Manipulate colors"
        }, 
        {
            "location": "/API/everloop/#manipulate-position", 
            "text": "// rotate the lights clockwise by a specified angle\nmatrix.led().rotate(90)", 
            "title": "Manipulate position"
        }, 
        {
            "location": "/API/everloop/#composition", 
            "text": "", 
            "title": "Composition"
        }, 
        {
            "location": "/API/everloop/#shape-objects", 
            "text": "// make a smiley face\nmatrix.led([\n  {\n    angle: 45,\n    color: 'yellow'\n  },\n  {\n    angle: 135,\n    color: 'yellow'\n  },\n  {\n    arc: 90,\n    color: 'yellow',\n    start: 225\n  }\n]).darken(90).render();", 
            "title": "Shape Objects"
        }, 
        {
            "location": "/API/everloop/#direct-pixel-manipulation", 
            "text": "Array index = led to change  matrix.led([0, 0, 0, 0, 'yellow', 0,\n0, 0, 0, 0, 0, 0, 0, 'yellow', 0, 0,\n0, 0, 0, 0, 0, 0, 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow' ]).render();", 
            "title": "Direct Pixel Manipulation"
        }, 
        {
            "location": "/API/everloop/#example-clock", 
            "text": "setInterval(function(){\n  var time = new Date();\n  var h = time.getHours();\n  var m = time.getMinutes();\n  var s = time.getSeconds();\n\n  var hourLED = {\n    // translate hours (12) to angle (360)\n    arc: h * 3,\n    color: 'blue',\n    darken: 50\n  };\n\n  var minuteLED = {\n    // translate minutes ( 60 ) to angle ( 360 )\n    angle: m * 6,\n    color: 'green'\n  };\n\n  var secondLED = {\n    // translate seconds (60) to angle (360)\n    angle: s * 6,\n    color: yellow,\n    blend: true\n  };\n\n  matrix.led([hourLED, minuteLED]).render();\n\n}, 1000)", 
            "title": "Example clock"
        }, 
        {
            "location": "/API/nfc/", 
            "text": "Still working out the precise API for this. Stay tuned.\n\n\nmatrix.init('nfc')...", 
            "title": "NFC"
        }, 
        {
            "location": "/API/zwave/", 
            "text": "Still working out the precise API for this. Stay tuned.\n\n\nmatrix.init('zwave')...", 
            "title": "Z-wave"
        }, 
        {
            "location": "/API/zigbee/", 
            "text": "Still working out the precise API for this. Stay tuned.\n\n\nmatrix.init('zigbee')...\n\n\n\n\nList Networks\n\n\nList the networks available to connect to.\n\n\nList Appliances\n\n\nList the appliances available on the network.\n\n\nList Objects\n\n\nList the available objects within the appliance.\n\n\nObject Status\n\n\nList the current status of an object.\n\n\nObject Properties\n\n\nUpdate\n\n\nUpdate an object property.\n\n\nRetrieve\n\n\nRetrieve an object property.\n\n\nInject", 
            "title": "Zigbee"
        }, 
        {
            "location": "/API/zigbee/#list-networks", 
            "text": "List the networks available to connect to.", 
            "title": "List Networks"
        }, 
        {
            "location": "/API/zigbee/#list-appliances", 
            "text": "List the appliances available on the network.", 
            "title": "List Appliances"
        }, 
        {
            "location": "/API/zigbee/#list-objects", 
            "text": "List the available objects within the appliance.", 
            "title": "List Objects"
        }, 
        {
            "location": "/API/zigbee/#object-status", 
            "text": "List the current status of an object.", 
            "title": "Object Status"
        }, 
        {
            "location": "/API/zigbee/#object-properties", 
            "text": "", 
            "title": "Object Properties"
        }, 
        {
            "location": "/API/zigbee/#update", 
            "text": "Update an object property.", 
            "title": "Update"
        }, 
        {
            "location": "/API/zigbee/#retrieve", 
            "text": "Retrieve an object property.", 
            "title": "Retrieve"
        }, 
        {
            "location": "/API/zigbee/#inject", 
            "text": "", 
            "title": "Inject"
        }, 
        {
            "location": "/Configuration/overview/", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/Configuration/screens/", 
            "text": "", 
            "title": "Screens"
        }, 
        {
            "location": "/Configuration/datatypes/", 
            "text": "", 
            "title": "Datatypes"
        }, 
        {
            "location": "/CLI/overview/", 
            "text": "Overview\n\n\nMatrixOS devices and applications are managed via the Matrix CLI.\n\n\nInstallation\n\n\nnpm install -g matrix-cli\n\n\n\n\nThis will make the \nmatrix\n command available in your terminal.\n\n\nRegistration\n\n\nIf you do not have an AdMobilize MATRIX account, use:\n\n\nmatrix register\n\n\n\n\nCheck your email to confirm the account then you can login.\n\n\nhelp\n\n\nRun \nmatrix\n by itself to see the command reference and configuration information.\n\n\n  _  _ ____ ___ ____ _ _  _\n  |\\/| |__|  |  |__/ |  \\/   _ | [o]\n  |  | |  |  |  |  \\ | _/\\_ |_ |_ | v1.1.3  - production\n\n\nAPI: http://demo.admobilize.com Streaming: http://mxss.admobilize.com:80\nUser: hello@rokk3rlabs.com Device: 12:23:34:45:56\n\n---- SETUP ----\n login - Login to the MatrixOS platform\nlogout - Log out of the MatrixOS platform\n   use - Indicate active device\n   set - set environment settings, update application configuration\n       \u21b3 [env \nenvironment\n, config \napp\n k=v]\n\n-- MANAGEMENT --\n   sim - manage local MatrixOS simulator using docker\n       \u21b3 [ init, restore, start, stop, save, clear ]\n  list - information about your devices, applications and installations\n       \u21b3 [ apps, devices, all, groups ]\nreboot - Reboots the active MatrixOS device\n\n----- APPS -----\nsearch - Search for apps\ninstall - Install an app or sensor to active MatrixOS device\n       \u21b3 [ app / sensor ] \nname\n. defaults to app\nconfig - view and modify application configuration\nuninstall - uninstall \napp\n\nupdate - Update to a specified version of a MatrixOS application\n       \u21b3 \nappName\n \nversion\n\n start - Starts an app running on the active MatrixOS\n  stop - Stops an app running on the active MatrixOS\nrestart - Restarts an app running on the MatrixOS\n\n- DEVELOPMENT -\ncreate - Creates a new scaffolding for a MatrixOS Application\ndeploy - Deploys an app to the active MatrixOS\ntrigger - Runs a trigger test\n   log - Logs output from selected MatrixOS and applications\n\n\n\n\nCreating an Application\n\n\nCreating an application is very basic. It deploys from template stored in the \nmatrix-console\n package.\n\n\nmatrix create app1\n\n\n\n\nApp Structure\n\n\n\n\napp.js\n -- This is your application logic\n\n\nconfig.yaml\n -- Change variables, indicate sensors, configure dashboard.\n\n\nDEVELOPER.MD\n -- Developer information that will be published for integrations on the Developer Portal.\n\n\nindex.js\n -- app entry point, do not modify\n\n\npackage.json\n -- NodeJS information file, do not modify without knowledge.\n\n\n\n\nManagement\n\n\nmatrix list - information about your MatrixOS devices, applications and installations [ apps, devices, all, groups ]\n -- matrix list apps - Shows a list of apps under your account.\n -- matrix list devices - Shows a list of devices under your account.\n -- matrix list all - Shows a list of devices, with the Apps installed on each device.\n -- matrix list groups - Shows a list of groups under your account.\n\n\n\n\nControl over Applications\n\n\nWork with your apps, and within the app ecosystem here. You can deploy to your simulator, or deploy to your actual MATRIX hardware. It's up to you.\n\n\nmatrix search - Search for apps\nmatrix install - [-a] app and [-s] sensor install. defaults to app.\n -- matrix install sensor [sensorname]\n -- matrix install app [appname]\nmatrix update - Update, update app1, update app1 v0.1\nmatrix uninstall - Usage: uninstall app1\n -- matrix uninstall sensor [sensorname]\n -- matrix uninstall app [appname]\nmatrix start - Starts an app running on the MATRIX.\nmatrix stop - Stops an app running on the MATRIX.\nmatrix restart - Restarts an app running on the MATRIX.\n\n\n\n\nDeveloping an Application\n\n\nFlexibility to develop anything you want. These four simple commands help you test and build pretty much anything.\n\n\nmatrix create - Creates a new scaffolding for a MATRIX App.\nmatrix deploy - Deploys an app to the Matrix.\nmatrix trigger - Runs a trigger test\nmatrix log - Usage: log [-f, --follow]\n\n\n\n\n\n\nUsing the Simulator\n\n\nCreate a fresh simulator, using the MATRIX OS image available online.\n\n\nmatrix sim - manage local MatrixOS simulator using docker [ upgrade, restore, init, start, save, clear ]\n -- matrix sim upgrade - initialize your MatrixOS simulator\n -- matrix sim restore - Restore your MatrixOS simulator\n -- matrix sim init - initialize your MatrixOS simulator\n -- matrix sim start - start MatrixOS virtual environment\n -- matrix sim save - save MatrixOS state, use after deploy / install\n -- matrix sim clear - remove simulation local data", 
            "title": "Overview"
        }, 
        {
            "location": "/CLI/overview/#overview", 
            "text": "MatrixOS devices and applications are managed via the Matrix CLI.", 
            "title": "Overview"
        }, 
        {
            "location": "/CLI/overview/#installation", 
            "text": "npm install -g matrix-cli  This will make the  matrix  command available in your terminal.", 
            "title": "Installation"
        }, 
        {
            "location": "/CLI/overview/#registration", 
            "text": "If you do not have an AdMobilize MATRIX account, use:  matrix register  Check your email to confirm the account then you can login.", 
            "title": "Registration"
        }, 
        {
            "location": "/CLI/overview/#help", 
            "text": "Run  matrix  by itself to see the command reference and configuration information.    _  _ ____ ___ ____ _ _  _\n  |\\/| |__|  |  |__/ |  \\/   _ | [o]\n  |  | |  |  |  |  \\ | _/\\_ |_ |_ | v1.1.3  - production\n\n\nAPI: http://demo.admobilize.com Streaming: http://mxss.admobilize.com:80\nUser: hello@rokk3rlabs.com Device: 12:23:34:45:56\n\n---- SETUP ----\n login - Login to the MatrixOS platform\nlogout - Log out of the MatrixOS platform\n   use - Indicate active device\n   set - set environment settings, update application configuration\n       \u21b3 [env  environment , config  app  k=v]\n\n-- MANAGEMENT --\n   sim - manage local MatrixOS simulator using docker\n       \u21b3 [ init, restore, start, stop, save, clear ]\n  list - information about your devices, applications and installations\n       \u21b3 [ apps, devices, all, groups ]\nreboot - Reboots the active MatrixOS device\n\n----- APPS -----\nsearch - Search for apps\ninstall - Install an app or sensor to active MatrixOS device\n       \u21b3 [ app / sensor ]  name . defaults to app\nconfig - view and modify application configuration\nuninstall - uninstall  app \nupdate - Update to a specified version of a MatrixOS application\n       \u21b3  appName   version \n start - Starts an app running on the active MatrixOS\n  stop - Stops an app running on the active MatrixOS\nrestart - Restarts an app running on the MatrixOS\n\n- DEVELOPMENT -\ncreate - Creates a new scaffolding for a MatrixOS Application\ndeploy - Deploys an app to the active MatrixOS\ntrigger - Runs a trigger test\n   log - Logs output from selected MatrixOS and applications", 
            "title": "help"
        }, 
        {
            "location": "/CLI/overview/#creating-an-application", 
            "text": "Creating an application is very basic. It deploys from template stored in the  matrix-console  package.  matrix create app1", 
            "title": "Creating an Application"
        }, 
        {
            "location": "/CLI/overview/#app-structure", 
            "text": "app.js  -- This is your application logic  config.yaml  -- Change variables, indicate sensors, configure dashboard.  DEVELOPER.MD  -- Developer information that will be published for integrations on the Developer Portal.  index.js  -- app entry point, do not modify  package.json  -- NodeJS information file, do not modify without knowledge.", 
            "title": "App Structure"
        }, 
        {
            "location": "/CLI/overview/#management", 
            "text": "matrix list - information about your MatrixOS devices, applications and installations [ apps, devices, all, groups ]\n -- matrix list apps - Shows a list of apps under your account.\n -- matrix list devices - Shows a list of devices under your account.\n -- matrix list all - Shows a list of devices, with the Apps installed on each device.\n -- matrix list groups - Shows a list of groups under your account.", 
            "title": "Management"
        }, 
        {
            "location": "/CLI/overview/#control-over-applications", 
            "text": "Work with your apps, and within the app ecosystem here. You can deploy to your simulator, or deploy to your actual MATRIX hardware. It's up to you.  matrix search - Search for apps\nmatrix install - [-a] app and [-s] sensor install. defaults to app.\n -- matrix install sensor [sensorname]\n -- matrix install app [appname]\nmatrix update - Update, update app1, update app1 v0.1\nmatrix uninstall - Usage: uninstall app1\n -- matrix uninstall sensor [sensorname]\n -- matrix uninstall app [appname]\nmatrix start - Starts an app running on the MATRIX.\nmatrix stop - Stops an app running on the MATRIX.\nmatrix restart - Restarts an app running on the MATRIX.", 
            "title": "Control over Applications"
        }, 
        {
            "location": "/CLI/overview/#developing-an-application", 
            "text": "Flexibility to develop anything you want. These four simple commands help you test and build pretty much anything.  matrix create - Creates a new scaffolding for a MATRIX App.\nmatrix deploy - Deploys an app to the Matrix.\nmatrix trigger - Runs a trigger test\nmatrix log - Usage: log [-f, --follow]", 
            "title": "Developing an Application"
        }, 
        {
            "location": "/CLI/overview/#using-the-simulator", 
            "text": "Create a fresh simulator, using the MATRIX OS image available online.  matrix sim - manage local MatrixOS simulator using docker [ upgrade, restore, init, start, save, clear ]\n -- matrix sim upgrade - initialize your MatrixOS simulator\n -- matrix sim restore - Restore your MatrixOS simulator\n -- matrix sim init - initialize your MatrixOS simulator\n -- matrix sim start - start MatrixOS virtual environment\n -- matrix sim save - save MatrixOS state, use after deploy / install\n -- matrix sim clear - remove simulation local data", 
            "title": "Using the Simulator"
        }, 
        {
            "location": "/CLI/apps/", 
            "text": "Applications\n\n\nSearch\n\n\n# Find MatrixOS apps for a keyword\nmatrix search keyword\n\n\n\n\nAll the following commands require an active MatrixOS to be specified with \nmatrix use\n.\n\n\nInstall\n\n\n# Install an app from the store to MatrixOS\nmatrix install appName\n\n\n\n\nCreate\n\n\n#creates a folder with a base matrix app template\nmatrix create appName\n\n\n\n\nSee \ndocs/api\n for more information about writing MatrixOS apps.\n\n\nDeploy\n\n\n# uploads app folder to MatrixOS\nmatrix deploy appName\n\n\n\n\nRun\n\n\nmatrix start appName\n\n\n\n\nStop\n\n\nmatrix stop appName\n\n\n\n\nRestart\n\n\nmatrix restart appName", 
            "title": "Apps"
        }, 
        {
            "location": "/CLI/apps/#applications", 
            "text": "", 
            "title": "Applications"
        }, 
        {
            "location": "/CLI/apps/#search", 
            "text": "# Find MatrixOS apps for a keyword\nmatrix search keyword  All the following commands require an active MatrixOS to be specified with  matrix use .", 
            "title": "Search"
        }, 
        {
            "location": "/CLI/apps/#install", 
            "text": "# Install an app from the store to MatrixOS\nmatrix install appName", 
            "title": "Install"
        }, 
        {
            "location": "/CLI/apps/#create", 
            "text": "#creates a folder with a base matrix app template\nmatrix create appName  See  docs/api  for more information about writing MatrixOS apps.", 
            "title": "Create"
        }, 
        {
            "location": "/CLI/apps/#deploy", 
            "text": "# uploads app folder to MatrixOS\nmatrix deploy appName", 
            "title": "Deploy"
        }, 
        {
            "location": "/CLI/apps/#run", 
            "text": "matrix start appName", 
            "title": "Run"
        }, 
        {
            "location": "/CLI/apps/#stop", 
            "text": "matrix stop appName", 
            "title": "Stop"
        }, 
        {
            "location": "/CLI/apps/#restart", 
            "text": "matrix restart appName", 
            "title": "Restart"
        }, 
        {
            "location": "/CLI/example/", 
            "text": "Example Simulator Workflow\n\n\nmatrix login\nmatrix sim init\nmatrix use simid-abc123\nmatrix sim start\n\n# makes testapp/ with app scaffold\nmatrix create testapp\n\n# places testapp/ onto matrixos\nmatrix deploy testapp\n\n# starts testapp/\nmatrix start testapp\n\n\n\n\nExample App Install and Set Configurations\n\n\nmatrix login\nmatrix list devices\nmatrix use \ndeviceId\n\n\nmatrix install frontdoor\nmatrix set config frontdoor settings.lock.apiKey=ABC123FED\nmatrix start frontdoor", 
            "title": "Examples"
        }, 
        {
            "location": "/CLI/example/#example-simulator-workflow", 
            "text": "matrix login\nmatrix sim init\nmatrix use simid-abc123\nmatrix sim start\n\n# makes testapp/ with app scaffold\nmatrix create testapp\n\n# places testapp/ onto matrixos\nmatrix deploy testapp\n\n# starts testapp/\nmatrix start testapp", 
            "title": "Example Simulator Workflow"
        }, 
        {
            "location": "/CLI/example/#example-app-install-and-set-configurations", 
            "text": "matrix login\nmatrix list devices\nmatrix use  deviceId \n\nmatrix install frontdoor\nmatrix set config frontdoor settings.lock.apiKey=ABC123FED\nmatrix start frontdoor", 
            "title": "Example App Install and Set Configurations"
        }, 
        {
            "location": "/Hardware/fpga/", 
            "text": "FPGA\n\n\nOnce you have installed the \nrequired software\n you can program the FPGA. This will allow you to play with the everloop LED array.\n\n\nFirst, get the firmware.\n\n\nwget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz\n\n\n\nThen flash the firmware using the \nxc3sprog\n program that should be installed on the Raspberry.\n\n\nsudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1\n\n\n\nSample result:\n\n\n$ sudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1\nXC3SPROG (c) 2004-2011 xc3sprog project $Rev: 774 $ OS: Linux\nFree software: If you contribute nothing, expect nothing!\nFeedback on success/failure/enhancement requests:\n    http://sourceforge.net/mail/?group_id=170565 \nCheck Sourceforge for updates:\n    http://sourceforge.net/projects/xc3sprog/develop\n\nDNA is 0x39c620e4bfe15bfd\n\n\n\nQuestions? Post them on \nraspberrypi.stackexchange.com\n! Use the tag #matrix-creator", 
            "title": "FPGA"
        }, 
        {
            "location": "/Hardware/fpga/#fpga", 
            "text": "Once you have installed the  required software  you can program the FPGA. This will allow you to play with the everloop LED array.  First, get the firmware.  wget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz  Then flash the firmware using the  xc3sprog  program that should be installed on the Raspberry.  sudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1  Sample result:  $ sudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1\nXC3SPROG (c) 2004-2011 xc3sprog project $Rev: 774 $ OS: Linux\nFree software: If you contribute nothing, expect nothing!\nFeedback on success/failure/enhancement requests:\n    http://sourceforge.net/mail/?group_id=170565 \nCheck Sourceforge for updates:\n    http://sourceforge.net/projects/xc3sprog/develop\n\nDNA is 0x39c620e4bfe15bfd  Questions? Post them on  raspberrypi.stackexchange.com ! Use the tag #matrix-creator", 
            "title": "FPGA"
        }, 
        {
            "location": "/Hardware/Sam3/", 
            "text": "SAM3 Firmware Flash\n\n\nThis firmware is used to read the sensors. You can build it in your host machine, and then copy the resulting binary to the Raspberry Pi.\n\n\nFirst, you need to compile the firmware. You can do it in the Rasbperry Pi (if you have enough space available) or in your host machine if you want to do it faster.\n\n\napt-get install gcc-arm-none-eabi\ngit clone https://github.com/matrix-io/matrix-creator-mcu\ncd  matrix-creator-mcu/creator \n make\n\n\n\n\nNow copy build/ch.bin to the Rasbperry Pi (if you didn't build there) and \nflash it\n. In order to flash it you need to replace the file blob/ch.bin (or edit the cfg/sam3s.cfg configuration file).\n\n\nAnd only then you can flash the SAM3 firmware.\n\n\nsudo openocd -f cfg/sam3s.cfg\n\n\n\n\nQuestions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "SAM3"
        }, 
        {
            "location": "/Hardware/Sam3/#sam3-firmware-flash", 
            "text": "This firmware is used to read the sensors. You can build it in your host machine, and then copy the resulting binary to the Raspberry Pi.  First, you need to compile the firmware. You can do it in the Rasbperry Pi (if you have enough space available) or in your host machine if you want to do it faster.  apt-get install gcc-arm-none-eabi\ngit clone https://github.com/matrix-io/matrix-creator-mcu\ncd  matrix-creator-mcu/creator   make  Now copy build/ch.bin to the Rasbperry Pi (if you didn't build there) and  flash it . In order to flash it you need to replace the file blob/ch.bin (or edit the cfg/sam3s.cfg configuration file).  And only then you can flash the SAM3 firmware.  sudo openocd -f cfg/sam3s.cfg  Questions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "SAM3 Firmware Flash"
        }, 
        {
            "location": "/Hardware/sam3mcu-programming/", 
            "text": "Sam3 MCU Programming\n\n\nOnce you have installed the \nrequired software\n you can program the SAM3 MCU. The MCU is used to read the sensors.\n\n\nThis firmware is free software and \nyou can compile it yourself\n. Here we describe the process of compiling the shipped firmware.\n\n\nFirst, get the firmware.\n\n\nwget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz\n\n\n\nThen flash the firmware using the \nopenocd\n program that should be installed on the Raspberry (with the package matrix-creator-openocd).\n\n\nThen execute the following commands as root.\n\n\necho 18 \n /sys/class/gpio/export\necho out \n /sys/class/gpio/gpio18/direction\necho 1 \n /sys/class/gpio/gpio18/value\necho 0 \n /sys/class/gpio/gpio18/value\necho 1 \n /sys/class/gpio/gpio18/value\n\n\n\nNow you can program the firmware.\n\n\ncd firmware-0.8\nsudo openocd -f cfg/sam3s.cfg\n\n\n\nExample output:\n\n\n$ sudo openocd -f cfg/sam3s.cfg\nOpen On-Chip Debugger 0.10.0-dev-00283-g7223cae-dirty (2016-07-15-08:36)\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nBCM2835 GPIO config: tck = 17, tms = 4, tdi = 22, tdo = 27\nBCM2835 GPIO config: trst = 18\ntrst_only separate trst_push_pull\nadapter speed: 512 kHz\nWarn : em357.bs: nonstandard IR value\nWarn : Specify TAP 'sam3n.cpu.cpu' by name, not number 3\nInfo : BCM2835 GPIO JTAG/SWD bitbang driver\nInfo : JTAG only mode enabled (specify swclk and swdio gpio to add SWD mode)\nInfo : clock speed 512 kHz\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nInfo : sam3n.cpu: hardware has 6 breakpoints, 4 watchpoints\nsam3n.cpu: target state: halted\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x61000000 pc: 0x00402560 psp: 0x20000800\n#0 : at91sam3 at 0x00400000, size 0x00020000, buswidth 0, chipwidth 0\n    #  0: 0x00000000 (0x4000 16kB) not protected\n    #  1: 0x00004000 (0x4000 16kB) not protected\n    #  2: 0x00008000 (0x4000 16kB) not protected\n    #  3: 0x0000c000 (0x4000 16kB) not protected\n    #  4: 0x00010000 (0x4000 16kB) not protected\n    #  5: 0x00014000 (0x4000 16kB) not protected\n    #  6: 0x00018000 (0x4000 16kB) not protected\n    #  7: 0x0001c000 (0x4000 16kB) not protected\nflash 'at91sam3' found at 0x00400000\nError: Invalid ACK (6) in DAP response\nError: Failed to read memory at 0x400e0a0c\nError: SAM3: Error performing Erase \n Write page @ phys address 0x00400800\nwrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nWarn : Only resetting the Cortex-M core, use a reset-init event handler to reset any peripherals or configure     hardware srst support.\nshutdown command invoked\n\n\n\nFlashing succeeded if you get the line \"wrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\" in the previous output. A small LED next to the SAM3 MCU should start flashing once per second.\n\n\nIf flashing fails, please retry the flashing command.\n\n\nSample video\n\n\nQuestions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "SAM3MCU"
        }, 
        {
            "location": "/Hardware/sam3mcu-programming/#sam3-mcu-programming", 
            "text": "Once you have installed the  required software  you can program the SAM3 MCU. The MCU is used to read the sensors.  This firmware is free software and  you can compile it yourself . Here we describe the process of compiling the shipped firmware.  First, get the firmware.  wget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz  Then flash the firmware using the  openocd  program that should be installed on the Raspberry (with the package matrix-creator-openocd).  Then execute the following commands as root.  echo 18   /sys/class/gpio/export\necho out   /sys/class/gpio/gpio18/direction\necho 1   /sys/class/gpio/gpio18/value\necho 0   /sys/class/gpio/gpio18/value\necho 1   /sys/class/gpio/gpio18/value  Now you can program the firmware.  cd firmware-0.8\nsudo openocd -f cfg/sam3s.cfg  Example output:  $ sudo openocd -f cfg/sam3s.cfg\nOpen On-Chip Debugger 0.10.0-dev-00283-g7223cae-dirty (2016-07-15-08:36)\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nBCM2835 GPIO config: tck = 17, tms = 4, tdi = 22, tdo = 27\nBCM2835 GPIO config: trst = 18\ntrst_only separate trst_push_pull\nadapter speed: 512 kHz\nWarn : em357.bs: nonstandard IR value\nWarn : Specify TAP 'sam3n.cpu.cpu' by name, not number 3\nInfo : BCM2835 GPIO JTAG/SWD bitbang driver\nInfo : JTAG only mode enabled (specify swclk and swdio gpio to add SWD mode)\nInfo : clock speed 512 kHz\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nInfo : sam3n.cpu: hardware has 6 breakpoints, 4 watchpoints\nsam3n.cpu: target state: halted\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x61000000 pc: 0x00402560 psp: 0x20000800\n#0 : at91sam3 at 0x00400000, size 0x00020000, buswidth 0, chipwidth 0\n    #  0: 0x00000000 (0x4000 16kB) not protected\n    #  1: 0x00004000 (0x4000 16kB) not protected\n    #  2: 0x00008000 (0x4000 16kB) not protected\n    #  3: 0x0000c000 (0x4000 16kB) not protected\n    #  4: 0x00010000 (0x4000 16kB) not protected\n    #  5: 0x00014000 (0x4000 16kB) not protected\n    #  6: 0x00018000 (0x4000 16kB) not protected\n    #  7: 0x0001c000 (0x4000 16kB) not protected\nflash 'at91sam3' found at 0x00400000\nError: Invalid ACK (6) in DAP response\nError: Failed to read memory at 0x400e0a0c\nError: SAM3: Error performing Erase   Write page @ phys address 0x00400800\nwrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nWarn : Only resetting the Cortex-M core, use a reset-init event handler to reset any peripherals or configure     hardware srst support.\nshutdown command invoked  Flashing succeeded if you get the line \"wrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\" in the previous output. A small LED next to the SAM3 MCU should start flashing once per second.  If flashing fails, please retry the flashing command.  Sample video  Questions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "Sam3 MCU Programming"
        }, 
        {
            "location": "/intro/hal/", 
            "text": "Hardware Abstraction Layer\n\n\nWith the following instructions you will be able to run demos for the Everloop LED Array and for the IMU. These demos make use of the \nhardware abstraction layer\n.\n\n\n\n\nIf you followed the \ngetting started\n steps the \nFPGA\n and the \nSAM3 MCU\n should be programmed and ready. Also, \nSPI should have been enabled for you\n.\n\n\nThus you can just get the required source code and build it:\n\n\ngit clone https://github.com/matrix-io/matrix-creator-hal.git\ncd matrix-creator-hal\nmkdir build \n cd build\ncmake .. \n make\n\n\n\nIf the project built with no issues you can run the demos. The demos run for ever, you can terminate them with Control+C.\n\n\nSpinning leds ( \nvideo\n ):\n\n\ndemos/everloop_demo\n\n\n\nArc demo ( \nvideo\n ) :\n\n\ndemos/arc_demo\n\n\n\nCompass demo:\n\n\ndemos/compass_demo\n\nyaw = -116.006  roll = 3.19588  pitch = 0.370596\nyaw = -116.577  roll = 3.61794  pitch = 0.210613\nyaw = -115.649  roll = 3.64227  pitch = 0.334733\nyaw = -115.468  roll = 3.34762  pitch = 0.42658\nyaw = -116.423  roll = 3.49536  pitch = 0.566351\n\n\n\nMicrophones:\n\n\ndemos/mic_demo\n\n52  29  54  74  74  49  39  60\n60  31  52  46  41  55  68  70\n60  44  55  43  53  68  62  62\n45  17  69  54  18  38  74  67\n\n(You get one value for each microphone)\n\n\n\nQuestions? Post them on \nraspberrypi.stackexchange.com\n! Use the tag #matrix-creator", 
            "title": "HAL"
        }, 
        {
            "location": "/intro/hal/#hardware-abstraction-layer", 
            "text": "With the following instructions you will be able to run demos for the Everloop LED Array and for the IMU. These demos make use of the  hardware abstraction layer .   If you followed the  getting started  steps the  FPGA  and the  SAM3 MCU  should be programmed and ready. Also,  SPI should have been enabled for you .  Thus you can just get the required source code and build it:  git clone https://github.com/matrix-io/matrix-creator-hal.git\ncd matrix-creator-hal\nmkdir build   cd build\ncmake ..   make  If the project built with no issues you can run the demos. The demos run for ever, you can terminate them with Control+C.  Spinning leds (  video  ):  demos/everloop_demo  Arc demo (  video  ) :  demos/arc_demo  Compass demo:  demos/compass_demo\n\nyaw = -116.006  roll = 3.19588  pitch = 0.370596\nyaw = -116.577  roll = 3.61794  pitch = 0.210613\nyaw = -115.649  roll = 3.64227  pitch = 0.334733\nyaw = -115.468  roll = 3.34762  pitch = 0.42658\nyaw = -116.423  roll = 3.49536  pitch = 0.566351  Microphones:  demos/mic_demo\n\n52  29  54  74  74  49  39  60\n60  31  52  46  41  55  68  70\n60  44  55  43  53  68  62  62\n45  17  69  54  18  38  74  67\n\n(You get one value for each microphone)  Questions? Post them on  raspberrypi.stackexchange.com ! Use the tag #matrix-creator", 
            "title": "Hardware Abstraction Layer"
        }, 
        {
            "location": "/intro/malos/", 
            "text": "Matrix Abstraction Layer for OS\n\n\nMALOS provides a \nZeroMQ\n messaging layer. An intended target for this layer is \nMatrixOS\n.\n\n\nInstall MALOS\n\n\nsudo apt-get install matrix-creator-init matrix-creator-malos cmake g++ git\nsudo shutdown -r now\n\n\n\n\nUpgrade MALOS\n\n\nsudo apt-get update \n sudo apt-get upgrade\nsudo shutdown -r now\n\n\n\n\nTest MALOS\n\n\nStart it as a background process.\n\n\nmalos \n /dev/null 2\n1 \n\n\n\n\n\nInstall the most recent version\n\n\nTo use it make sure that you have the most recent version installed:\n\n\napt-get update\napt-get install matrix-creator-malos\n\n\n\nRunning malos\n\n\nAnd then run it. You should see an output like the following one:\n\n\n$ malos\n**************\nMALOS starting\n**************\n\nYou can query specific driver info using port 20012.\nRegistered driver IMU with port 20013.\nRegistered driver Humidity with port 20017.\nRegistered driver Everloop with port 20021.\n\n\n\nDetails\n\n\nMALOS gives you direct access to the hardware devices, and each device has four ZeroMQ (ZMQ) sockets:\n\n\n\n\nBase port (for instance 20013). ZMQ PULL channel used for device configuration (if configuration is required, most devices have a default configuration).\n\n\n(base_port + 1) is used as a keep-alive channel. This channel is used to tell the driver that it should keep sending updates to MATRIX OS. Each driver has a configurable time interval that tells it how often it should expect keep-alive messages. If an amount of time bigger than the interval elapses without keepalives, the driver will stop sending updates.\n\n\n(base_port + 2) is used as error channel. ZMQ PUSH. If an error occurs, it will be sent in this channel.\n\n\n(base_port + 3) is used to send device updates. ZMQ PUSH. Clients will normally listen on this port for updates.\n\n\n\n\nIt's important to note that \nmore than one program\n can subscribe to the \nerror channel\n and the \ndevice updates channel\n. This is achieved thanks to the PUB/SUB model of ZMQ.\n\n\nIn this \nNode.js example\n you can see all the channels used. If you want to run it you need to edit the IP address (and maybe the port depending on the device base-port mapping.\n\n\nExample - Query device list\n\n\nThis \nNode.js example\n shows how you can query the device list and some capabilities. This program uses a ZMQ RPC call.\n\n\nTo run the file, you need to edit the \ncreator_ip\n to match the IP of the Raspberry PI and the first port printed when the command malos is started (20012 in the sample session shown above).\n\n\nThis is what the output looks like:\n\n\n$ nodejs test_driver_info.js\n{ info:\n   [ { driver_name: 'IMU',\n       base_port: 20013,\n       provides_updates: true,\n       delay_between_updates: 1000,\n       needs_pings: true,\n       timeout_after_last_ping: 5000,\n       notes_for_human: 'Provides yaw/pitch/roll. Check Imu message (protocol buffer)' },\n     { driver_name: 'Humidity',\n       base_port: 20017,\n       provides_updates: true,\n       delay_between_updates: 1000,\n       needs_pings: true,\n       timeout_after_last_ping: 5000,\n       notes_for_human: 'Provides humidity and temperature. Check Humidity message (protocol buffer)' },\n     { driver_name: 'Everloop',\n       base_port: 20021,\n       provides_updates: false,\n       delay_between_updates: 1000,\n       needs_pings: false,\n       timeout_after_last_ping: 5000,\n       notes_for_human: 'Write-only. There are 35 leds. Values range from 0 to 255. Check message EverloopImage (protocol buffer)' } ] }\n\n\n\nEverloop demo\n\n\nOnce MALOS is operational, you can run the \nEverloop LED array demo\n. Remember to edit the IP address of your Raspberry PI.\n\n\nFor the impatient, here is a video of what this demo does: \nhttps://youtu.be/b0n2-hzFgcY\n.", 
            "title": "MALOS"
        }, 
        {
            "location": "/intro/malos/#matrix-abstraction-layer-for-os", 
            "text": "MALOS provides a  ZeroMQ  messaging layer. An intended target for this layer is  MatrixOS .", 
            "title": "Matrix Abstraction Layer for OS"
        }, 
        {
            "location": "/intro/malos/#install-malos", 
            "text": "sudo apt-get install matrix-creator-init matrix-creator-malos cmake g++ git\nsudo shutdown -r now", 
            "title": "Install MALOS"
        }, 
        {
            "location": "/intro/malos/#upgrade-malos", 
            "text": "sudo apt-get update   sudo apt-get upgrade\nsudo shutdown -r now", 
            "title": "Upgrade MALOS"
        }, 
        {
            "location": "/intro/malos/#test-malos", 
            "text": "Start it as a background process.  malos   /dev/null 2 1", 
            "title": "Test MALOS"
        }, 
        {
            "location": "/intro/malos/#install-the-most-recent-version", 
            "text": "To use it make sure that you have the most recent version installed:  apt-get update\napt-get install matrix-creator-malos", 
            "title": "Install the most recent version"
        }, 
        {
            "location": "/intro/malos/#running-malos", 
            "text": "And then run it. You should see an output like the following one:  $ malos\n**************\nMALOS starting\n**************\n\nYou can query specific driver info using port 20012.\nRegistered driver IMU with port 20013.\nRegistered driver Humidity with port 20017.\nRegistered driver Everloop with port 20021.", 
            "title": "Running malos"
        }, 
        {
            "location": "/intro/malos/#details", 
            "text": "MALOS gives you direct access to the hardware devices, and each device has four ZeroMQ (ZMQ) sockets:   Base port (for instance 20013). ZMQ PULL channel used for device configuration (if configuration is required, most devices have a default configuration).  (base_port + 1) is used as a keep-alive channel. This channel is used to tell the driver that it should keep sending updates to MATRIX OS. Each driver has a configurable time interval that tells it how often it should expect keep-alive messages. If an amount of time bigger than the interval elapses without keepalives, the driver will stop sending updates.  (base_port + 2) is used as error channel. ZMQ PUSH. If an error occurs, it will be sent in this channel.  (base_port + 3) is used to send device updates. ZMQ PUSH. Clients will normally listen on this port for updates.   It's important to note that  more than one program  can subscribe to the  error channel  and the  device updates channel . This is achieved thanks to the PUB/SUB model of ZMQ.  In this  Node.js example  you can see all the channels used. If you want to run it you need to edit the IP address (and maybe the port depending on the device base-port mapping.", 
            "title": "Details"
        }, 
        {
            "location": "/intro/malos/#example-query-device-list", 
            "text": "This  Node.js example  shows how you can query the device list and some capabilities. This program uses a ZMQ RPC call.  To run the file, you need to edit the  creator_ip  to match the IP of the Raspberry PI and the first port printed when the command malos is started (20012 in the sample session shown above).  This is what the output looks like:  $ nodejs test_driver_info.js\n{ info:\n   [ { driver_name: 'IMU',\n       base_port: 20013,\n       provides_updates: true,\n       delay_between_updates: 1000,\n       needs_pings: true,\n       timeout_after_last_ping: 5000,\n       notes_for_human: 'Provides yaw/pitch/roll. Check Imu message (protocol buffer)' },\n     { driver_name: 'Humidity',\n       base_port: 20017,\n       provides_updates: true,\n       delay_between_updates: 1000,\n       needs_pings: true,\n       timeout_after_last_ping: 5000,\n       notes_for_human: 'Provides humidity and temperature. Check Humidity message (protocol buffer)' },\n     { driver_name: 'Everloop',\n       base_port: 20021,\n       provides_updates: false,\n       delay_between_updates: 1000,\n       needs_pings: false,\n       timeout_after_last_ping: 5000,\n       notes_for_human: 'Write-only. There are 35 leds. Values range from 0 to 255. Check message EverloopImage (protocol buffer)' } ] }", 
            "title": "Example - Query device list"
        }, 
        {
            "location": "/intro/malos/#everloop-demo", 
            "text": "Once MALOS is operational, you can run the  Everloop LED array demo . Remember to edit the IP address of your Raspberry PI.  For the impatient, here is a video of what this demo does:  https://youtu.be/b0n2-hzFgcY .", 
            "title": "Everloop demo"
        }, 
        {
            "location": "/Reference/overview/", 
            "text": "MATRIX Creator\n\n\n\n\nTechnical Datasheets:\n\n\n\n\n\n\nAtmel 32 bits Cortex M3 SAM3S2\n\n\n\n\n\n\nXilinx Spartan 6S XC6SLX4 FPGA\n\n\n\n\n\n\n8 MEMS audio sensor digital microphones\n\n\n\n\n\n\nST LSM9DS1 3D accelerometer, 3D gyroscope, 3D magnetometer\n\n\n\n\n\n\nST HTS221 digital sensor for relative humidity and temperature\n\n\n\n\n\n\nNXP PN512 NFC reader\n\n\n\n\n\n\nNXP MPL3115A2 Altimeter\n\n\n\n\n\n\nVishay VEML6070 UV Light Sensor\n\n\n\n\n\n\nVishay INFRARED Receptor\n\n\n\n\n\n\nRGBW everloop LED", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/overview/#matrix-creator", 
            "text": "", 
            "title": "MATRIX Creator"
        }, 
        {
            "location": "/Reference/overview/#technical-datasheets", 
            "text": "Atmel 32 bits Cortex M3 SAM3S2    Xilinx Spartan 6S XC6SLX4 FPGA    8 MEMS audio sensor digital microphones    ST LSM9DS1 3D accelerometer, 3D gyroscope, 3D magnetometer    ST HTS221 digital sensor for relative humidity and temperature    NXP PN512 NFC reader    NXP MPL3115A2 Altimeter    Vishay VEML6070 UV Light Sensor    Vishay INFRARED Receptor    RGBW everloop LED", 
            "title": "Technical Datasheets:"
        }, 
        {
            "location": "/Reference/pinout/", 
            "text": "Expansion pinout\n\n\n\n\nExpansion location\n\n\n\n\nFPGA's UCF definition\n\n\nNET \nDF\n16\n LOC=\nP106\n;\nNET \nDF\n15\n LOC=\nP102\n;\nNET \nDF\n14\n LOC=\nP101\n;\nNET \nDF\n13\n LOC=\nP99\n;\nNET \nDF\n12\n LOC=\nP98\n;\nNET \nDF\n11\n LOC=\nP95\n;\nNET \nDF\n10\n LOC=\nP94\n;\nNET \nDF\n9\n LOC=\nP93\n;\nNET \nDF\n8\n LOC=\nP92\n;\nNET \nDF\n7\n LOC=\nP88\n;\nNET \nDF\n6\n LOC=\nP85\n;\nNET \nDF\n5\n LOC=\nP83\n;\nNET \nDF\n4\n LOC=\nP82\n;\nNET \nDF\n3\n LOC=\nP81\n;\nNET \nDF\n2\n LOC=\nP80\n;\nNET \nDF\n1\n LOC=\nP79\n;\nNET \nDF\n0\n LOC=\nP78\n;", 
            "title": "Pinout"
        }, 
        {
            "location": "/Reference/pinout/#expansion-pinout", 
            "text": "", 
            "title": "Expansion pinout"
        }, 
        {
            "location": "/Reference/pinout/#expansion-location", 
            "text": "", 
            "title": "Expansion location"
        }, 
        {
            "location": "/Reference/pinout/#fpgas-ucf-definition", 
            "text": "NET  DF 16  LOC= P106 ;\nNET  DF 15  LOC= P102 ;\nNET  DF 14  LOC= P101 ;\nNET  DF 13  LOC= P99 ;\nNET  DF 12  LOC= P98 ;\nNET  DF 11  LOC= P95 ;\nNET  DF 10  LOC= P94 ;\nNET  DF 9  LOC= P93 ;\nNET  DF 8  LOC= P92 ;\nNET  DF 7  LOC= P88 ;\nNET  DF 6  LOC= P85 ;\nNET  DF 5  LOC= P83 ;\nNET  DF 4  LOC= P82 ;\nNET  DF 3  LOC= P81 ;\nNET  DF 2  LOC= P80 ;\nNET  DF 1  LOC= P79 ;\nNET  DF 0  LOC= P78 ;", 
            "title": "FPGA's UCF definition"
        }
    ]
}